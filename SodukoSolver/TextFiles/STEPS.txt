This is a text file that will contain my notes to myself during the process of creating the game.
I will be using this to keep track of what I have done and what I need to do.
I will also be using this to keep track of any bugs that I find and how to fix them.

This file is temporary and will be deleted once the project is complete.



 STEPS TO SOLVE SUDOKU:
 1. fix improving algorithm that's not working
 2. implement spiral backtracking
 3. implement dancing links
 4. implement backtracking with bits


 NOTES:
 1. keep the algoitm generic as possible, so that it can be used for any size of sudoku board, they will ask to make
 it work with 16 by 16 so no hardcoding, just variables that work for any size of board
 
 2. make the algoritm as efficiant as possible, the time complexity of a 9 by 9 sudoku is 9^81, so it needs to be as fast as possible
 the time complexity of a 16 by 16 sudoku is 16^256, so it needs to be as fast as possible, and the goal is to solve any size of sudoku in under 1 second

 3. make the algorithm as simple as possible, so that it can be easily understood and modified by others

 4. add comments to every step of the way so that it is easy to understand what is going on

 5. add file handling to the program so that it can read and write to files and can recieve input from the user and output the solution to the user all using files
 this can also be done by writing some kind of interface 'IReadable' and 'IWriteable' and then have the program read and write to those interfaces,
 so that the program can be easily modified to read and write to different types of files

 6. divide the profram into different classes, so that it is easy to understand and modify
 
 7. make the functions as small as possible, so that it is easy to understand and modify

 8. add time complexity analysis to the program, so that it is easy to understand how fast the program is and how to make it faster
 when we see that the time complexity is too high
 
 9. make sure all code is up to the standard of c#, read the c# coding standards and make sure the code follows them
 also try to make the code cleaner following the principile of 'never nesting' that states that you should never have more then 3 levels of nesting in your code
 
 10. add tests at the end to the program
 



 
 BUGS:
 1. print function not working for boards that are filled with 0's
 2. for some reason 4 by 4 and 2 by 2 boards are not working - 2 by 2 not working with bitwise algorithm ???
 3. no time complexity analysis, so it is hard to know how fast the program is and how to make it faster
 4. no tests, so it is hard to know if the program is working correctly
 5. solving takes very long time for some 9 by 9 boards, and barely handles 16 by 16 boards or 25 by 25 boards


 DIFFICULT PUZZLES:
 
 400000805030000000000700000020000060000080400000010000000603070500200000104000000 -- still problematic
 
 000000000000003085001020000000507000004000100090000000500000073002010000000040009 

 000006000059000008200008000045000000003000000006003054000325006000000000000000000 
 
 000700000100000000000430200000000006000509000000000418000081000002000050040000300 

 900800000000000500000000000020010003010000060000400070708600000000030100400000200 
 
 000005080000601043000000000010500000000106000300000005530000061000000004000000000 -- still problematic

 16 by 16:
 
10023400<06000700080007003009:6;0<00:0010=0;00>0300?200>000900<0=000800:0<201?000;76000@000?005=000:05?0040800;0@0059<00100000800200000=00<580030=00?0300>80@000580010002000=9?000<406@0=00700050300<0006004;00@0700@050>0010020;1?900=002000>000>000;0200=3500<

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

file path for test file:

C:\Users\eldar\source\repos\eldarush\CSSodokuSolver\SodukoSolver\testboard.txt

C:\Users\eldar\source\repos\eldarush\CSSodokuSolver\SodukoSolver\empty16by16board.txt

25 by 25:



100002000003000004@00005000000600007000000000000080000090000000@0000000000000000000000000000000000000000000<00000000005000000000000000000000000000000000000000>00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:00000000000000000000000000000;00000000000000008900000000000000000000000000000000000000000=00000000000000000000000000000000000000000000000000000000000000@000000000000000000000300000000000000008000000000000000000007000000000000000000000000000000400000000000000000000000000000100000000200000?000000000000000000000